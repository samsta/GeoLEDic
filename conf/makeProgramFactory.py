import sys
import programs
from string import Template


FACTORY_TEMPLATE = '''
// autogenerated by $scriptname

// prune some stupid FastLED dependencies
#define __INC_PLATFORMS_H
#define HAS_HARDWARE_PIN_SUPPORT

#include "ProgramFactory.hpp"
#include "programs/Diagnostic.hpp"
#ifdef WITH_GFX
#include "imgui/imgui.h"
#endif

$includes

void ProgramFactory::doChangeProgram(uint8_t program)
{
   switch (program)
   {
$cases
   default:
      m_current_program = new Diagnostic(m_dome, m_strips);
   }
}

#ifdef WITH_GFX
const char* ProgramFactory::PROGRAM_NAMES[] = {
    $names
};

const unsigned ProgramFactory::NUM_PROGRAMS($num_programs);
#endif

'''

CASE_TEMPLATE = '''
   case $num:
      m_current_program = new $program(m_dome);
      break;

'''

filename = sys.argv[1]
includes = ''
cases = ''

program_number = 0
names = []
for program in programs.get():
    includes += '#include "programs/%s.hpp"\n' % program['program']
    cases += Template(CASE_TEMPLATE).substitute(
        num=program_number, 
        program=program['program'])
    # program number in the UI is usually 1-based
    names.append("%3d - %s" % ((program_number+1), program['name']))
    program_number += 1

with open(filename, 'w') as file:
    file.write(Template(FACTORY_TEMPLATE).substitute(
        scriptname=sys.argv[0],
        includes=includes,
        names='"' + '",\n        "'.join(names) + '"',
        num_programs=len(names),
        cases=cases))
